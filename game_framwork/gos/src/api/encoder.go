/*
 * Generated by tools/gen_protocol
 */

package api

import (
	  . "app/consts"
	  "gslib/utils/packet"
)


func encodeEquipLoadParams(buffer *packet.Packet, value interface{}) {
    v := value.(*EquipLoadParams)
    buffer.WriteString(v.PlayerID)
    buffer.WriteString(v.EquipId)
    buffer.WriteString(v.HeroId)
}

func encodeEquipLoadResponse(buffer *packet.Packet, value interface{}) {
    v := value.(*EquipLoadResponse)
    buffer.WriteString(v.PlayerID)
    buffer.WriteString(v.EquipId)
    buffer.WriteUint32(v.Level)
}

func encodeEquipUnLoadParams(buffer *packet.Packet, value interface{}) {
    v := value.(*EquipUnLoadParams)
    buffer.WriteString(v.PlayerID)
    buffer.WriteString(v.EquipId)
    buffer.WriteString(v.HeroId)
}

func encodeEquipUnLoadResponse(buffer *packet.Packet, value interface{}) {
    v := value.(*EquipUnLoadResponse)
    buffer.WriteString(v.PlayerID)
    buffer.WriteString(v.EquipId)
    buffer.WriteUint32(v.Level)
}

func encodeLoginResponse(buffer *packet.Packet, value interface{}) {
    v := value.(*LoginResponse)
    buffer.WriteString(v.Uuid)
    buffer.WriteUint32(v.Level)
    buffer.WriteFloat32(v.Exp)
    
    buffer.WriteUint16(uint16(len(v.Equips)))
    for i := 0; i < len(v.Equips); i++ {
        encodeEquipLoadResponse(buffer, v.Equips[i])
    }
    
    buffer.WriteUint16(uint16(len(v.Friends)))
    for i := 0; i < len(v.Friends); i++ {
        buffer.WriteString(v.Friends[i])
    }
    
    buffer.WriteUint16(uint16(len(v.Ages)))
    for i := 0; i < len(v.Ages); i++ {
        buffer.WriteInt32(v.Ages[i])
    }
}

type EncodeHandler func(buffer *packet.Packet, value interface{})
var encode_handlers = map[string]EncodeHandler{
    "EquipLoadParams": encodeEquipLoadParams,
    "EquipLoadResponse": encodeEquipLoadResponse,
    "EquipUnLoadParams": encodeEquipUnLoadParams,
    "EquipUnLoadResponse": encodeEquipUnLoadResponse,
    "LoginResponse": encodeLoginResponse}

func Encode(encode_method string, v interface{}) *packet.Packet {
    protocol := NameToId[encode_method]
    buffer := packet.Writer()
    buffer.WriteUint16(protocol)
	  encode_handlers[encode_method](buffer, v)
    return buffer
}
