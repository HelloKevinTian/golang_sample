desc "Generate Structs from mysql tables"

def convert_define(type)
    case type.to_s
    when 'integer'
        'int'
    when 'boolean'
        'bool'
    else
        type.to_s
    end
end

task :generate_tables => :environment do
  header = "//Generated by generate_tables\n"
  structs_content = "#{header}package consts\n"
  struct_to_table_name = ""
  register_content = ""
  data_loader = []
  ActiveRecord::Base.connection.tables.each do |table_name|
    next if table_name == 'schema_migrations'
    struct_name = table_name.singularize.camelize
    structs_content << "type #{struct_name} struct{\n"
    ActiveRecord::Base.connection.columns(table_name).each do |c| 
      structs_content << %Q{    #{c.name.camelize} #{convert_define(c.type)} `db:"#{c.name}"`\n}
    end
    structs_content << "}\n"
    struct_to_table_name << %Q{"#{struct_name}": "#{table_name}",\n}
    register_content << %Q{    dbInstance.AddTableWithName(#{struct_name}{}, "#{table_name}").SetKeys(false, "uuid")\n}
    data_loader << %Q{
  store.RegisterDataLoader("#{table_name}", func(playerId string, ctx interface{}) interface{} {
    var datas []#{struct_name}
    var models []*#{struct_name}Model
    ctx.(*gslib.Player).Store.Db.Select(&datas, "SELECT * FROM #{table_name} where user_id=?", playerId)
    for i := 0; i < len(datas); i++ {
      data := datas[i]
      models = append(models, &#{struct_name}Model{gslib.BaseModel{"#{table_name}", data.Uuid, ctx.(*gslib.Player)}, &data})
    }
    return models
  })
}
  end

  #################################################
  # Generate table structs
  #################################################
  structs_content << %Q{
    var StructToTableNameMap = map[string]string{
      #{struct_to_table_name}
    }
  }
  path = "src/app/consts/tables.go"
  File.open(path, "w") { |io| io.write structs_content }
  `go fmt #{path}`


  #################################################
  # Generate register_tables
  #################################################
  path = "src/app/register/tables/register_tables.go"
  File.open(path, "w") do |io| 
    io.write %Q{\
#{header}
package tables

import (
    . "app/consts"
    "github.com/go-gorp/gorp"
)

func RegisterTables(dbInstance *gorp.DbMap) {
#{register_content}
}}
  end
  `go fmt #{path}`


  #################################################
  # Generate data_loader
  #################################################
  path = "src/app/register/data_loader.go"
  File.open(path, "w") do |io|
    io.write %Q{\
#{header}
package register

import (
  . "app/consts"
  . "app/models"
  "gslib"
  "gslib/store"
)

func RegisterDataLoader() {\
#{data_loader.join("\n")}
}}
  end
  `go fmt #{path}`
end
