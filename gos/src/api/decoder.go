/*
 * Generated by tools/gen_protocol
 */

package api

import (
	. "app/consts"
	"gslib/utils/packet"
)


func decodeEquipLoadParams(buffer *packet.Packet) interface{} {
    data := &EquipLoadParams{}
    data.PlayerID = buffer.ReadString()
    data.EquipId = buffer.ReadString()
    data.HeroId = buffer.ReadString()
    return data
}

func decodeEquipLoadResponse(buffer *packet.Packet) interface{} {
    data := &EquipLoadResponse{}
    data.PlayerID = buffer.ReadString()
    data.EquipId = buffer.ReadString()
    data.Level = buffer.ReadUint32()
    return data
}

func decodeEquipUnLoadParams(buffer *packet.Packet) interface{} {
    data := &EquipUnLoadParams{}
    data.PlayerID = buffer.ReadString()
    data.EquipId = buffer.ReadString()
    data.HeroId = buffer.ReadString()
    return data
}

func decodeEquipUnLoadResponse(buffer *packet.Packet) interface{} {
    data := &EquipUnLoadResponse{}
    data.PlayerID = buffer.ReadString()
    data.EquipId = buffer.ReadString()
    data.Level = buffer.ReadUint32()
    return data
}

func decodeLoginResponse(buffer *packet.Packet) interface{} {
    data := &LoginResponse{}
    data.Uuid = buffer.ReadString()
    data.Level = buffer.ReadUint32()
    data.Exp = buffer.ReadFloat32()
    
    for i := 0; i < int(buffer.ReadUint16()); i++ {
        data.Equips = append(data.Equips, decodeEquipLoadResponse(buffer).(*EquipLoadResponse))
    }
    
    for i := 0; i < int(buffer.ReadUint16()); i++ {
        data.Friends = append(data.Friends, buffer.ReadString())
    }
    
    for i := 0; i < int(buffer.ReadUint16()); i++ {
        data.Ages = append(data.Ages, buffer.ReadInt32())
    }
    return data
}

type DecodeHandler func(buffer *packet.Packet) interface{}

var decode_handlers = map[string]DecodeHandler{
    "EquipLoadParams": decodeEquipLoadParams,
    "EquipLoadResponse": decodeEquipLoadResponse,
    "EquipUnLoadParams": decodeEquipUnLoadParams,
    "EquipUnLoadResponse": decodeEquipUnLoadResponse,
    "LoginResponse": decodeLoginResponse}

func Decode(decode_method string, buffer *packet.Packet) interface{} {
	if handler, ok := decode_handlers[decode_method]; ok {
		return handler(buffer)
	} else {
		return nil
	}
}
